## Generate an ssh key pair and upload it to aws secret manager
##
resource "tls_private_key" "deployer" {
  algorithm = "ED25519"
}

resource "aws_secretsmanager_secret" "private_key_openssh" {
  name                    = var.ssh_key_name
  description             = "The private key generated by terraform."
  recovery_window_in_days = 0

  tags = local.tags
}

resource "aws_secretsmanager_secret_version" "private_key_openssh" {
  secret_id     = aws_secretsmanager_secret.private_key_openssh.id
  secret_string = tls_private_key.deployer.private_key_openssh
}

resource "local_sensitive_file" "private_key_openssh" {
  content         = tls_private_key.deployer.private_key_openssh
  filename        = local.ssh_key_path
  file_permission = 0400
}

## Add public key to AWS EC2 Keys
##
resource "aws_key_pair" "deployer" {
  key_name   = var.ssh_key_name
  public_key = tls_private_key.deployer.public_key_openssh

  tags = merge(local.tags, { Name = "${var.ssh_key_name}" })
}

## Create security groups for EC2 instances
##
resource "aws_security_group" "this" {
  for_each = var.security_groups # at least one security group is required

  vpc_id      = var.vpc_id
  name        = each.key
  description = try(each.value.description, "")

  dynamic "ingress" {
    for_each = try(each.value.ingress-rules, [{}])
    content {
      description = try("${ingress.value.description}", "Allow incoming connections to any port within the VPC.")
      from_port   = try("${ingress.value.port}", 0)
      to_port     = try("${ingress.value.port}", 0)
      protocol    = try("${ingress.value.protocol}", -1)
      cidr_blocks = try("${ingress.value.cidr_blocks}", [var.vpc_cidr_block])
      self        = try("${ingress.value.self}", false)
    }
  }

  dynamic "egress" {
    for_each = try(each.value.egress-rules, [{}])
    content {
      description = try("${egress.value.description}", "Allow outgoing traffic to anywhere.")
      from_port   = try("${egress.value.port}", 0)
      to_port     = try("${egress.value.port}", 0)
      protocol    = try("${egress.value.protocol}", -1)
      cidr_blocks = try("${egress.value.cidr_blocks}", ["0.0.0.0/0"])
      self        = try("${egress.value.self}", false)
    }
  }

  tags = merge(local.tags, { Name = "${each.key}" })
}

module "ec2_instance" {
  source   = "terraform-aws-modules/ec2-instance/aws"
  for_each = var.ec2_instances

  name                   = each.value.name
  instance_type          = each.value.instance_type
  ami                    = each.value.ami
  key_name               = try(each.value.key_name, aws_key_pair.deployer.key_name)
  monitoring             = try(each.value.monitoring, true)
  vpc_security_group_ids = [aws_security_group.this[each.value.security_group_name].id]
  subnet_id              = each.value.subnet_id

  tags = merge(local.tags, { Name = "${each.value.name}" })
}

resource "aws_eip" "this" {
  for_each = var.ec2_instances

  instance                  = module.ec2_instance[each.key].id
  associate_with_private_ip = module.ec2_instance[each.key].private_ip

  tags = merge(local.tags, { Name = "${each.value.name}" })
}
